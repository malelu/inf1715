*****************************************
Aluna: Marina Leao Lucena
Professor: Hisham Muhammad
Matéria: Compiladores
Trabalho: AST
*****************************************

*****************************************
Diretórios e arquivos:

	- Diretório testes
		- Diretório entrada
			- teste1.mg a teste29.mg
			- testeCorreto.mg
		- Diretório gabarito
			- teste1.mg.out.exp a teste29.mg.out.exp
			- testeCorreto.mg.out.exp
		- Diretório saida
	- main.c
	- analisadorLexico.l
	- analisadorSintatico.y
	- makefile
	- teste.sh
	- leiame.txt

*****************************************
Para executar o programa, siga os seguintes passos:

	- Abra o terminal
	- Navegue ao diretório do trabalho pelo terminal
	- Escreva no terminal o comando "make" e pressione enter para compilar o programa e criar o executável
	- Escreva no terminal o comando "sh testes.sh" para gerar as saídas e compará-las com o gabarito

*****************************************
Relatório do trabalho:

No trabalho foi implementado uma Árvore de Sintaxe Abstrata para a linguagem mini-0.
Em conjunto com o Analisador SIntático do trabalho anterior, a árvore é montada, por bottom up a cada passo da gramática.
Os nós são:

	AST_PROGRAM
	AST_GLOBAL : tem 2 filhos
		 filho 1 : nó contendo o valor do ID
		 filho 2 : nó representando o tipo do ID
	AST_FUN : tem 4 filhos
		 filho 1 :
		 filho 2 :
		 filho 3 :
		 filho 4 :
	AST_BLOCK
	AST_PARAM : tem 2 filhos
		 filho 1 : nó contendo o valor do ID
		 filho 2 : nó representando o tipo do ID
	AST_INT : não tem nós filhos
	AST_CHAR : não tem nós filhos
	AST_BOOL : não tem nós filhos
	AST_STRING : não tem nós filhos
	AST_IF : tem 3 filhos
		 filho 1 :
		 filho 2 :
		 filho 3 :
	AST_BLOCK_ELSE
	AST_ELSEIF : tem 3 filhos
		 filho 1 :
		 filho 2 :
		 filho 3 :

	AST_ELSE : tem 1 filho
		 filho : nó do tipo block representando o bloco de código interno à contrução

	AST_WHILE : tem 2 filhos
		 filho 1 :
		 filho 2 : nó do tipo block representando o bloco de código interno à contrução

	AST_ATRIB : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_CALL : tem 2 filhos
		 filho 1 : nó contendo o valor do ID
		 filho 2 :
	AST_RET
	AST_OR : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_AND : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_LESS : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_GREATER : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_EQUAL : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_LESS_EQUAL : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_GREATER_EQUAL : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_NOT_EQUAL : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_PLUS : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_MINUS : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_TIMES : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_DIVIDED : tem 2 filhos
		 filho 1 :
		 filho 2 :
	AST_NOT
	AST_NEG
	AST_TRUE : não tem nós filhos
	AST_FALSE : não tem nós filhos
	AST_NEW





